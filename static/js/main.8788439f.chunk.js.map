{"version":3,"sources":["Search.tsx","App.tsx","index.tsx"],"names":["service","request","callback","console","log","input","ops","method","mode","headers","Origin","Authorization","window","btoa","body","JSON","stringify","query","match","question","fetch","then","res","json","data","hits","Array","qaList","map","val","_source","catch","e","Search","React","useState","value","setValue","inputValue","setInputValue","options","setOptions","useMemo","throttle","useEffect","active","results","newOptions","Autocomplete","id","style","width","getOptionLabel","option","filterOptions","x","autoComplete","noOptionsText","includeInputInList","filterSelectedOptions","onChange","event","newValue","onInputChange","newInputValue","renderInput","params","TextField","label","variant","fullWidth","renderOption","matches","parts","parse","Grid","container","alignItems","item","xs","part","index","key","fontWeight","highlight","text","Typography","color","answer","gutterBottom","Card","CardContent","App","spacing","justify","direction","alignContent","ReactDOM","render","document","getElementById"],"mappings":"yVAgBMA,EAAU,SACdC,EACAC,GAEAC,QAAQC,IAAI,uBAAyBH,EAAQI,OAE7C,IAAMC,EAAmB,CACvBC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,yBACRC,cAAc,SAAD,OAAWC,OAAOC,KAAK,2BAEtCC,KAAMC,KAAKC,UAAU,CAAEC,MAAO,CAAEC,MAAO,CAAEC,SAAUlB,EAAQI,WAG7De,MAAM,+CAAgDd,GACnDe,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,GAAIA,EAAKC,KAAKA,gBAAgBC,MAAO,CACnC,IACMC,EADOH,EAAKC,KAAKA,KACOG,KAAI,SAACC,GAAD,OAASA,EAAIC,WAC/C3B,QAAQC,IAAIuB,GACZzB,EAASyB,QAETzB,EAAS,OAGZ6B,OAAM,SAACC,GAAD,OAAO7B,QAAQC,IAAI4B,OAGf,SAASC,IAAS,MAELC,IAAMC,SAAwB,MAFzB,mBAExBC,EAFwB,KAEjBC,EAFiB,OAGKH,IAAMC,SAAS,IAHpB,mBAGxBG,EAHwB,KAGZC,EAHY,OAIDL,IAAMC,SAAmB,IAJxB,mBAIxBK,EAJwB,KAIfC,EAJe,KAMzBrB,EAAQc,IAAMQ,SAClB,kBACEC,KACE,SACE1C,EACAC,GAEAF,EAAQC,EAASC,KAEnB,OAEJ,IAgCF,OA7BAgC,IAAMU,WAAU,WACd,IAAIC,GAAS,EAEb,GAAmB,KAAfP,EAqBJ,OAhBAlB,EAAM,CAAEf,MAAOiC,IAAc,SAACQ,GAC5B,GAAID,EAAQ,CACV,IAAIE,EAAa,GAEbX,IACFW,EAAa,CAACX,IAGZU,IACFC,EAAU,sBAAOA,GAAP,YAAsBD,KAGlCL,EAAWM,OAIR,WACLF,GAAS,GArBTJ,EAAWL,EAAQ,CAACA,GAAS,MAuB9B,CAACA,EAAOE,EAAYlB,IAGrB,6BACE,kBAAC4B,EAAA,EAAD,CACEC,GAAG,SACHC,MAAO,CAAEC,MAAO,QAChBC,eAAgB,SAACC,GAAD,MACI,kBAAXA,EAAsBA,EAASA,EAAOlC,UAE/CmC,cAAe,SAACC,GAAD,OAAOA,GACtBf,QAASA,EACTgB,cAAY,EACZC,cAAc,oBACdC,oBAAkB,EAClBC,uBAAqB,EACrBvB,MAAOA,EACPwB,SAAU,SAACC,EAAYC,GACrBrB,EAAWqB,EAAQ,CAAIA,GAAJ,mBAAiBtB,IAAWA,GAC/CH,EAASyB,IAEXC,cAAe,SAACF,EAAOG,GACrBzB,EAAcyB,IAEhBC,YAAa,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,MAAM,oBACNC,QAAQ,WACRC,WAAS,MAGbC,aAAc,SAAClB,GACb,IAAMmB,EAAUtD,IAAMmC,EAAOlC,SAAUmB,GACjCmC,EAAQC,IAAMrB,EAAOlC,SAAUqD,GACrC,OACE,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAW,UACzB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACVN,EAAM7C,KAAI,SAACoD,EAAMC,GAAP,OACT,0BACEC,IAAKD,EACL/B,MAAO,CAAEiC,WAAYH,EAAKI,UAAY,IAAM,MAE3CJ,EAAKK,SAGV,kBAACC,EAAA,EAAD,CAAYjB,QAAQ,QAAQkB,MAAM,iBAC/BlC,EAAOmC,aAOV,MAATpD,GACC,6BACE,kBAACkD,EAAA,EAAD,CAAYG,cAAc,EAAMF,MAAM,gBAAgBlB,QAAQ,SAA9D,wCAIA,kBAACqB,EAAA,EAAD,CAAMxC,MAAO,CAAEC,MAAO,MACpB,kBAACwC,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,CAAYjB,QAAQ,KAAKkB,MAAM,WAC5BnD,EAAMjB,UAET,2BAAIiB,EAAMoD,YChJTI,MAXf,WACE,OACI,kBAACjB,EAAA,EAAD,CAAMC,WAAS,EAACiB,QAAS,EAAGC,QAAQ,SAASC,UAAU,SAASC,aAAa,SAASnB,WAAW,UAC/F,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACQ,EAAA,EAAD,CAAYG,cAAc,EAAMF,MAAM,UAAUlB,QAAQ,MAAxD,6BACA,kBAACpC,EAAD,SCLVgE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8788439f.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Grid from \"@material-ui/core/Grid\";\nimport throttle from \"lodash/throttle\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport { Typography } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\ninterface QAType {\n  question: string;\n  answer: string;\n}\n\nconst service = (\n  request: { input: string },\n  callback: (results?: QAType[]) => void\n) => {\n  console.log(\"Service called with \" + request.input);\n\n  const ops: RequestInit = {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Origin: \"http://localhost:3000/\",\n      Authorization: `Basic ${window.btoa(\"es:Es!@#456HtruYyetsT\")}`,\n    },\n    body: JSON.stringify({ query: { match: { question: request.input } } }),\n  };\n\n  fetch(\"https://es.cloudsystems.ro/geography/_search\", ops)\n    .then((res) => res.json())\n    .then((data) => {\n      if (data.hits.hits instanceof Array) {\n        const hits = data.hits.hits as Array<any>;\n        const qaList: QAType[] = hits.map((val) => val._source as QAType);\n        console.log(qaList);\n        callback(qaList);\n      } else {\n        callback([]);\n      }\n    })\n    .catch((e) => console.log(e));\n};\n\nexport default function Search() {\n  //const classes = useStyles();\n  const [value, setValue] = React.useState<QAType | null>(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState<QAType[]>([]);\n\n  const fetch = React.useMemo(\n    () =>\n      throttle(\n        (\n          request: { input: string },\n          callback: (results?: QAType[]) => void\n        ) => {\n          service(request, callback);\n        },\n        200\n      ),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results?: QAType[]) => {\n      if (active) {\n        let newOptions = [] as QAType[];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <div>\n      <Autocomplete\n        id=\"search\"\n        style={{ width: \"100%\" }}\n        getOptionLabel={(option) =>\n          typeof option === \"string\" ? option : option.question\n        }\n        filterOptions={(x) => x}\n        options={options}\n        autoComplete\n        noOptionsText=\"Nincs találat.\"\n        includeInputInList\n        filterSelectedOptions\n        value={value}\n        onChange={(event: any, newValue: QAType | null) => {\n          setOptions(newValue ? [newValue, ...options] : options);\n          setValue(newValue);\n        }}\n        onInputChange={(event, newInputValue) => {\n          setInputValue(newInputValue);\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Írj be valamit\"\n            variant=\"outlined\"\n            fullWidth\n          />\n        )}\n        renderOption={(option) => {\n          const matches = match(option.question, inputValue);\n          const parts = parse(option.question, matches);\n          return (\n            <Grid container alignItems=\"center\">\n              <Grid item xs>\n                {parts.map((part, index) => (\n                  <span\n                    key={index}\n                    style={{ fontWeight: part.highlight ? 700 : 400 }}\n                  >\n                    {part.text}\n                  </span>\n                ))}\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  {option.answer}\n                </Typography>\n              </Grid>\n            </Grid>\n          );\n        }}\n      />\n      {value != null && (\n        <div>\n          <Typography gutterBottom={true} color=\"textSecondary\" variant=\"body2\">\n            Talált kérdés és felelet\n          </Typography>\n\n          <Card style={{ width: 650 }}>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"primary\">\n                {value.question}\n              </Typography>\n              <p>{value.answer}</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Search from \"./Search\";\nimport { Typography, Grid } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n      <Grid container spacing={0} justify=\"center\" direction=\"column\" alignContent=\"center\" alignItems=\"center\">\n        <Grid item>\n          <Typography gutterBottom={true} color='primary' variant=\"h1\">Kérdés, felelet ...</Typography>\n          <Search></Search>\n        </Grid>\n      </Grid>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}